AWSTemplateFormatVersion: 2010-09-09

Description: A CloudFormation template for running an EC2 instance based on AMI Id within a VPC subnet.

Parameters:
  ImageId:
    Type: AWS::EC2::Image::Id
    Description: AMI ID
    ConstraintDescription: Must be a valid AMI Id
  InstanceType:
    Type: String
    Description: An instance type and size
    AllowedValues: [ t1.micro, t2.2xlarge, t2.large, t2.medium, t2.micro, t2.nano, t2.small, t2.xlarge, t3.2xlarge,
                     t3.large, t3.medium, t3.micro, t3.nano, t3.small, t3.xlarge, t3a.2xlarge, t3a.large, t3a.medium,
                     t3a.micro, t3a.nano, t3a.small, t3a.xlarge, t4g.2xlarge, t4g.large, t4g.medium, t4g.micro, t4g.nano ]
    ConstraintDescription: Must be one of given values
    Default: t2.micro
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Select your key pair name
    ConstraintDescription: Must be an existing KeyPair name
  SecurityGroupIds:
    Type: String
    Description: A list of security groups
    ConstraintDescription: Must be a valid list of security group ids
    Default: ''
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select your VPC ID to used for creating an instance security group
    ConstraintDescription: Must be a valid VPC Id
  SSHLocation:
    Type: String
    Description: The IP address range that can be used to SSH to the EC2 instances
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  IamInstanceProfile:
    Type: String
    Description: A name of IAM role for EC2 instance
    Default: ''
  SubnetId:
    Type: String
    Description: A subnet Id where the instance should be running. A random public subnet within the Default VPC will be chosen by default.
    Default: ''

Conditions:
  HasSecurityGroupId: !Not [!Equals [!Ref SecurityGroupIds, '']]
  HasIamInstanceProfile: !Not [!Equals [!Ref IamInstanceProfile, '']]
  HasSubnetId: !Not [!Equals [!Ref SubnetId, '']]

Resources:
  InstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows inbound traffic to 80, 443 and 22 port from anywhere
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "443"
          ToPort: "443"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: !Ref SSHLocation

  Ec2Instance:
    Type: AWS::EC2::Instance
    DependsOn: InstanceSG
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroupIds: !Split [
        ',',
        !Join [
          ',',
          [
            !If [ HasSecurityGroupId, !Ref SecurityGroupIds, !Ref AWS::NoValue ],
            !GetAtt [ InstanceSG, GroupId ]
          ] ] ]
      IamInstanceProfile: !If [ HasIamInstanceProfile, !Ref IamInstanceProfile, !Ref AWS::NoValue ]
      SubnetId: !If [ HasSubnetId, !Ref SubnetId, !Ref AWS::NoValue ]
      Tags:
        - Key: Name
          Value: !Join [ '-', [ !Ref AWS::StackName, 'instance' ] ]
        - Key: Owner
          Value: boale
        - Key: Project
          Value: CloudX
        - Key: Environment
          Value: preprod

Outputs:
  Ec2PublicDnsName:
    Value: !GetAtt [ Ec2Instance, PublicDnsName]
  Ec2PublicIP:
    Value: !GetAtt [ Ec2Instance, PublicIp]
